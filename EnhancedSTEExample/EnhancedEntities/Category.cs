//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Linq;
using System.IO;

namespace EnhancedEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Product))]
    public partial class Category: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CategoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _categoryID = value;
                    OnPropertyChanged("CategoryID");
                }
            }
        }
        private int _categoryID;
    
        [DataMember]
        public string CategoryName
        {
            get { return _categoryName; }
            set
            {
                if (_categoryName != value)
                {
                    _categoryName = value;
                    OnPropertyChanged("CategoryName");
                }
            }
        }
        private string _categoryName;
    
        [DataMember]
        public string CategoryDesc
        {
            get { return _categoryDesc; }
            set
            {
                if (_categoryDesc != value)
                {
                    _categoryDesc = value;
                    OnPropertyChanged("CategoryDesc");
                }
            }
        }
        private string _categoryDesc;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    _products = new TrackableCollection<Product>();
                    _products.CollectionChanged += FixupProducts;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_products != null)
                    {
                        _products.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    if (_products != null)
                    {
                        _products.CollectionChanged += FixupProducts;
                    }
                    OnNavigationPropertyChanged("Products");
                }
            }
        }
        private TrackableCollection<Product> _products;

        #endregion
        #region Object Graph Manipulation
    
    	private Dictionary<string, object> _restoreValues;
    
    	private void RecordValues()
    	{
    		_restoreValues = new Dictionary<string, object>();
    		_restoreValues.Add( "Products", new List<Product>( Products ) );
    	}
    
    	private void RestoreValues()
    	{
    		if ( _restoreValues != null )
    		{
    			if ( _restoreValues.ContainsKey( "Products" ) )
    			{
    				var entity = _restoreValues["Products"] as List<Product>;
    				AttachProducts( entity );
    			}
    
    			_restoreValues.Clear();
    		}
    	}
    
    	public void CleanObjectGraph()
    	{
    		RecordValues();
    
    		DetachProducts();
    	}
    
    	public void RestoreObjectGraph()
    	{
    		RestoreValues();
    	}
    
    	public void ApplyUpdates( Category entity )
    	{
    		ApplyUpdates( entity, true );
    	}
    
    	public void ApplyUpdates( Category entity, bool updateNavigationProperties )
    	{
    		if ( ChangeTracker.State != ObjectState.Added && (
    			CategoryID != entity.CategoryID
    		) ) return;
    
    		entity = entity.Clone();
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		CategoryID = entity.CategoryID;
    		CategoryName = entity.CategoryName;
    		CategoryDesc = entity.CategoryDesc;
    
    		if ( updateNavigationProperties )
    		{
    
    			DetachProducts();
    			AttachProducts( entity.Products );
    		}
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    
    		this.AcceptChanges();
    	}
    
    	public void AttachProduct( Product entity )
    	{
    		if ( entity == null) return;
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = Products.FirstOrDefault( np => 
    				np.ProductID == entity.ProductID
    			);
    
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				Products.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		
    			entity.DetachCategory( this );
    		}
    		Products.Add( entity );
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}
    
    	public void AttachProducts( IEnumerable<Product> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( AttachProduct );
    	}
    
    	public void DetachProduct( Product entity )
    	{
    		if ( entity == null ) return;
    
    		var existing = Products.FirstOrDefault( np => 
    			np.ProductID == entity.ProductID
    		);
    
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    
    			Products.Remove( existing );
    
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    
    	public void DetachProducts( IEnumerable<Product> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( DetachProduct );
    	}
    
    	public void DetachProducts()
    	{
    		DetachProducts( Products );
    	}
    

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Products.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    if (!item.Categories.Contains(this))
                    {
                        item.Categories.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Products", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (item.Categories.Contains(this))
                    {
                        item.Categories.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Products", item);
                    }
                }
            }
        }

        #endregion
    }
}
