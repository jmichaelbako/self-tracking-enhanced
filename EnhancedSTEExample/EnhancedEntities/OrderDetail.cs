//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Linq;
using System.IO;

namespace EnhancedEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrderHeader))]
    [KnownType(typeof(Product))]
    public partial class OrderDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrderHeaderID
        {
            get { return _orderHeaderID; }
            set
            {
                if (_orderHeaderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderHeaderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (OrderHeader != null && OrderHeader.OrderHeaderID != value)
                        {
                            OrderHeader = null;
                        }
                    }
                    _orderHeaderID = value;
                    OnPropertyChanged("OrderHeaderID");
                }
            }
        }
        private int _orderHeaderID;
    
        [DataMember]
        public int LineNumber
        {
            get { return _lineNumber; }
            set
            {
                if (_lineNumber != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LineNumber' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lineNumber = value;
                    OnPropertyChanged("LineNumber");
                }
            }
        }
        private int _lineNumber;
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductID", _productID);
                    if (!IsDeserializing)
                    {
                        if (Product != null && Product.ProductID != value)
                        {
                            Product = null;
                        }
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public decimal UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice");
                }
            }
        }
        private decimal _unitPrice;
    
        [DataMember]
        public int Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private int _quantity;
    
        [DataMember]
        public decimal TotalPrice
        {
            get { return _totalPrice; }
            set
            {
                if (_totalPrice != value)
                {
                    _totalPrice = value;
                    OnPropertyChanged("TotalPrice");
                }
            }
        }
        private decimal _totalPrice;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public OrderHeader OrderHeader
        {
            get { return _orderHeader; }
            set
            {
                if (!ReferenceEquals(_orderHeader, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (OrderHeaderID != value.OrderHeaderID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _orderHeader;
                    _orderHeader = value;
                    FixupOrderHeader(previousValue);
                    OnNavigationPropertyChanged("OrderHeader");
                }
            }
        }
        private OrderHeader _orderHeader;
    
        [DataMember]
        public Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                    OnNavigationPropertyChanged("Product");
                }
            }
        }
        private Product _product;

        #endregion
        #region Object Graph Manipulation
    
    	private Dictionary<string, object> _restoreValues;
    
    	private void RecordValues()
    	{
    		_restoreValues = new Dictionary<string, object>();
    		_restoreValues.Add( "OrderHeader", OrderHeader );
    		_restoreValues.Add( "Product", Product );
    	}
    
    	private void RestoreValues()
    	{
    		if ( _restoreValues != null )
    		{
    			if ( _restoreValues.ContainsKey( "OrderHeader" ) )
    			{
    				var entity = _restoreValues["OrderHeader"] as OrderHeader;
    				AttachOrderHeader( entity );
    			}
    
    			if ( _restoreValues.ContainsKey( "Product" ) )
    			{
    				var entity = _restoreValues["Product"] as Product;
    				AttachProduct( entity );
    			}
    
    			_restoreValues.Clear();
    		}
    	}
    
    	public void CleanObjectGraph()
    	{
    		RecordValues();
    
    		DetachOrderHeader();
    		DetachProduct();
    	}
    
    	public void RestoreObjectGraph()
    	{
    		RestoreValues();
    	}
    
    	public void ApplyUpdates( OrderDetail entity )
    	{
    		ApplyUpdates( entity, true );
    	}
    
    	public void ApplyUpdates( OrderDetail entity, bool updateNavigationProperties )
    	{
    		if ( ChangeTracker.State != ObjectState.Added && (
    			OrderHeaderID != entity.OrderHeaderID
    				&&
    			LineNumber != entity.LineNumber
    		) ) return;
    
    		entity = entity.Clone();
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		OrderHeaderID = entity.OrderHeaderID;
    		LineNumber = entity.LineNumber;
    		ProductID = entity.ProductID;
    		UnitPrice = entity.UnitPrice;
    		Quantity = entity.Quantity;
    		TotalPrice = entity.TotalPrice;
    
    		if ( updateNavigationProperties )
    		{
    
    			DetachOrderHeader();
    			AttachOrderHeader( entity.OrderHeader );
    
    			DetachProduct();
    			AttachProduct( entity.Product );
    		}
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    
    		this.AcceptChanges();
    	}
    
    	public void AttachOrderHeader( OrderHeader entity )
    	{
    		if ( entity == null) return;
    
    		if (
    			OrderHeaderID != entity.OrderHeaderID
    		)
    		{
    			throw new InvalidOperationException("Unable to attach OrderHeader, ID is not valid.");
    		}
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = entity.OrderDetails.FirstOrDefault( np => 
    				np.OrderHeaderID == OrderHeaderID
    					&&
    				np.LineNumber == LineNumber
    		);
    		
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				entity.OrderDetails.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		}
    
    		entity.OrderDetails.Add(this);
    				
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}			
    			
    	public void DetachOrderHeader()
    	{
    		var existing = OrderHeader;
    				
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    			var existingID_1 = OrderHeaderID;
    			OrderHeader = null;
    			OrderHeaderID = existingID_1;
    		
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    
    	public void AttachProduct( Product entity )
    	{
    		if ( entity == null) return;
    
    		if (
    			ProductID != entity.ProductID
    		)
    		{
    			throw new InvalidOperationException("Unable to attach Product, ID is not valid.");
    		}
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = entity.OrderDetails.FirstOrDefault( np => 
    				np.OrderHeaderID == OrderHeaderID
    					&&
    				np.LineNumber == LineNumber
    		);
    		
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				entity.OrderDetails.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		}
    
    		entity.OrderDetails.Add(this);
    				
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}			
    			
    	public void DetachProduct()
    	{
    		var existing = Product;
    				
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    			var existingID_1 = ProductID;
    			Product = null;
    			ProductID = existingID_1;
    		
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderHeader = null;
            Product = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupOrderHeader(OrderHeader previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
            {
                previousValue.OrderDetails.Remove(this);
            }
    
            if (OrderHeader != null)
            {
                if (!OrderHeader.OrderDetails.Contains(this))
                {
                    OrderHeader.OrderDetails.Add(this);
                }
    
                OrderHeaderID = OrderHeader.OrderHeaderID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrderHeader")
                    && (ChangeTracker.OriginalValues["OrderHeader"] == OrderHeader))
                {
                    ChangeTracker.OriginalValues.Remove("OrderHeader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrderHeader", previousValue);
                }
                if (OrderHeader != null && !OrderHeader.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrderHeader.StartTracking();
                }
            }
        }
    
        private void FixupProduct(Product previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrderDetails.Contains(this))
            {
                previousValue.OrderDetails.Remove(this);
            }
    
            if (Product != null)
            {
                if (!Product.OrderDetails.Contains(this))
                {
                    Product.OrderDetails.Add(this);
                }
    
                ProductID = Product.ProductID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Product")
                    && (ChangeTracker.OriginalValues["Product"] == Product))
                {
                    ChangeTracker.OriginalValues.Remove("Product");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Product", previousValue);
                }
                if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
                {
                    Product.StartTracking();
                }
            }
        }

        #endregion
    }
}
