//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Linq;
using System.IO;

namespace EnhancedEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrderDetail))]
    [KnownType(typeof(Category))]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public string SKU
        {
            get { return _sKU; }
            set
            {
                if (_sKU != value)
                {
                    _sKU = value;
                    OnPropertyChanged("SKU");
                }
            }
        }
        private string _sKU;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public string ProductDesc
        {
            get { return _productDesc; }
            set
            {
                if (_productDesc != value)
                {
                    _productDesc = value;
                    OnPropertyChanged("ProductDesc");
                }
            }
        }
        private string _productDesc;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>();
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                return _orderDetails;
            }
            set
            {
                if (!ReferenceEquals(_orderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged -= FixupOrderDetails;
                    }
                    _orderDetails = value;
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged += FixupOrderDetails;
                    }
                    OnNavigationPropertyChanged("OrderDetails");
                }
            }
        }
        private TrackableCollection<OrderDetail> _orderDetails;
    
        [DataMember]
        public TrackableCollection<Category> Categories
        {
            get
            {
                if (_categories == null)
                {
                    _categories = new TrackableCollection<Category>();
                    _categories.CollectionChanged += FixupCategories;
                }
                return _categories;
            }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_categories != null)
                    {
                        _categories.CollectionChanged -= FixupCategories;
                    }
                    _categories = value;
                    if (_categories != null)
                    {
                        _categories.CollectionChanged += FixupCategories;
                    }
                    OnNavigationPropertyChanged("Categories");
                }
            }
        }
        private TrackableCollection<Category> _categories;

        #endregion
        #region Object Graph Manipulation
    
    	private Dictionary<string, object> _restoreValues;
    
    	private void RecordValues()
    	{
    		_restoreValues = new Dictionary<string, object>();
    		_restoreValues.Add( "OrderDetails", new List<OrderDetail>( OrderDetails ) );
    		_restoreValues.Add( "Categories", new List<Category>( Categories ) );
    	}
    
    	private void RestoreValues()
    	{
    		if ( _restoreValues != null )
    		{
    			if ( _restoreValues.ContainsKey( "OrderDetails" ) )
    			{
    				var entity = _restoreValues["OrderDetails"] as List<OrderDetail>;
    				AttachOrderDetails( entity );
    			}
    
    			if ( _restoreValues.ContainsKey( "Categories" ) )
    			{
    				var entity = _restoreValues["Categories"] as List<Category>;
    				AttachCategories( entity );
    			}
    
    			_restoreValues.Clear();
    		}
    	}
    
    	public void CleanObjectGraph()
    	{
    		RecordValues();
    
    		DetachOrderDetails();
    		DetachCategories();
    	}
    
    	public void RestoreObjectGraph()
    	{
    		RestoreValues();
    	}
    
    	public void ApplyUpdates( Product entity )
    	{
    		ApplyUpdates( entity, true );
    	}
    
    	public void ApplyUpdates( Product entity, bool updateNavigationProperties )
    	{
    		if ( ChangeTracker.State != ObjectState.Added && (
    			ProductID != entity.ProductID
    		) ) return;
    
    		entity = entity.Clone();
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		ProductID = entity.ProductID;
    		SKU = entity.SKU;
    		ProductName = entity.ProductName;
    		ProductDesc = entity.ProductDesc;
    
    		if ( updateNavigationProperties )
    		{
    
    			DetachOrderDetails();
    			AttachOrderDetails( entity.OrderDetails );
    
    			DetachCategories();
    			AttachCategories( entity.Categories );
    		}
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    
    		this.AcceptChanges();
    	}
    
    	public void AttachOrderDetail( OrderDetail entity )
    	{
    		if ( entity == null) return;
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = OrderDetails.FirstOrDefault( np => 
    				np.OrderHeaderID == entity.OrderHeaderID
    				&&
    				np.LineNumber == entity.LineNumber
    			);
    
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				OrderDetails.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		
    		}
    		OrderDetails.Add( entity );
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}
    
    	public void AttachOrderDetails( IEnumerable<OrderDetail> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( AttachOrderDetail );
    	}
    
    	public void DetachOrderDetail( OrderDetail entity )
    	{
    		if ( entity == null ) return;
    
    		var existing = OrderDetails.FirstOrDefault( np => 
    			np.OrderHeaderID == entity.OrderHeaderID
    				&&
    			np.LineNumber == entity.LineNumber
    		);
    
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    
    			OrderDetails.Remove( existing );
    
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    
    	public void DetachOrderDetails( IEnumerable<OrderDetail> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( DetachOrderDetail );
    	}
    
    	public void DetachOrderDetails()
    	{
    		DetachOrderDetails( OrderDetails );
    	}
    
    	public void AttachCategory( Category entity )
    	{
    		if ( entity == null) return;
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = Categories.FirstOrDefault( np => 
    				np.CategoryID == entity.CategoryID
    			);
    
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				Categories.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		
    			entity.DetachProduct( this );
    		}
    		Categories.Add( entity );
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}
    
    	public void AttachCategories( IEnumerable<Category> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( AttachCategory );
    	}
    
    	public void DetachCategory( Category entity )
    	{
    		if ( entity == null ) return;
    
    		var existing = Categories.FirstOrDefault( np => 
    			np.CategoryID == entity.CategoryID
    		);
    
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    
    			Categories.Remove( existing );
    
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    
    	public void DetachCategories( IEnumerable<Category> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( DetachCategory );
    	}
    
    	public void DetachCategories()
    	{
    		DetachCategories( Categories );
    	}
    

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderDetails.Clear();
            Categories.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.Product = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetails", item);
                    }
                }
            }
        }
    
        private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    if (!item.Products.Contains(this))
                    {
                        item.Products.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Categories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (item.Products.Contains(this))
                    {
                        item.Products.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Categories", item);
                    }
                }
            }
        }

        #endregion
    }
}
