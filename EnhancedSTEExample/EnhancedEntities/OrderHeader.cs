//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Linq;
using System.IO;

namespace EnhancedEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrderDetail))]
    public partial class OrderHeader: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrderHeaderID
        {
            get { return _orderHeaderID; }
            set
            {
                if (_orderHeaderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderHeaderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _orderHeaderID = value;
                    OnPropertyChanged("OrderHeaderID");
                }
            }
        }
        private int _orderHeaderID;
    
        [DataMember]
        public string OrderNumber
        {
            get { return _orderNumber; }
            set
            {
                if (_orderNumber != value)
                {
                    _orderNumber = value;
                    OnPropertyChanged("OrderNumber");
                }
            }
        }
        private string _orderNumber;
    
        [DataMember]
        public System.DateTime OrderDate
        {
            get { return _orderDate; }
            set
            {
                if (_orderDate != value)
                {
                    _orderDate = value;
                    OnPropertyChanged("OrderDate");
                }
            }
        }
        private System.DateTime _orderDate;
    
        [DataMember]
        public decimal TotalAmount
        {
            get { return _totalAmount; }
            set
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value;
                    OnPropertyChanged("TotalAmount");
                }
            }
        }
        private decimal _totalAmount;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>();
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                return _orderDetails;
            }
            set
            {
                if (!ReferenceEquals(_orderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged -= FixupOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (OrderDetail item in _orderDetails)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _orderDetails = value;
                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged += FixupOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (OrderDetail item in _orderDetails)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("OrderDetails");
                }
            }
        }
        private TrackableCollection<OrderDetail> _orderDetails;

        #endregion
        #region Object Graph Manipulation
    
    	private Dictionary<string, object> _restoreValues;
    
    	private void RecordValues()
    	{
    		_restoreValues = new Dictionary<string, object>();
    		_restoreValues.Add( "OrderDetails", new List<OrderDetail>( OrderDetails ) );
    	}
    
    	private void RestoreValues()
    	{
    		if ( _restoreValues != null )
    		{
    			if ( _restoreValues.ContainsKey( "OrderDetails" ) )
    			{
    				var entity = _restoreValues["OrderDetails"] as List<OrderDetail>;
    				AttachOrderDetails( entity );
    			}
    
    			_restoreValues.Clear();
    		}
    	}
    
    	public void CleanObjectGraph()
    	{
    		RecordValues();
    
    		DetachOrderDetails();
    	}
    
    	public void RestoreObjectGraph()
    	{
    		RestoreValues();
    	}
    
    	public void ApplyUpdates( OrderHeader entity )
    	{
    		ApplyUpdates( entity, true );
    	}
    
    	public void ApplyUpdates( OrderHeader entity, bool updateNavigationProperties )
    	{
    		if ( ChangeTracker.State != ObjectState.Added && (
    			OrderHeaderID != entity.OrderHeaderID
    		) ) return;
    
    		entity = entity.Clone();
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		OrderHeaderID = entity.OrderHeaderID;
    		OrderNumber = entity.OrderNumber;
    		OrderDate = entity.OrderDate;
    		TotalAmount = entity.TotalAmount;
    
    		if ( updateNavigationProperties )
    		{
    
    			DetachOrderDetails();
    			AttachOrderDetails( entity.OrderDetails );
    		}
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    
    		this.AcceptChanges();
    	}
    
    	public void AttachOrderDetail( OrderDetail entity )
    	{
    		if ( entity == null) return;
    
    		var tracking = ChangeTracker.ChangeTrackingEnabled;
    		var entityTracking = entity.ChangeTracker.ChangeTrackingEnabled;
    
    		ChangeTracker.ChangeTrackingEnabled = false;
    		entity.ChangeTracker.ChangeTrackingEnabled = false;
    
    		if ( entity.ChangeTracker.State != ObjectState.Added )
    		{
    			var existing = OrderDetails.FirstOrDefault( np => 
    				np.OrderHeaderID == entity.OrderHeaderID
    				&&
    				np.LineNumber == entity.LineNumber
    			);
    
    			if ( existing != null )
    			{
    				var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    				existing.ChangeTracker.ChangeTrackingEnabled = false;
    				OrderDetails.Remove( existing );
    				existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			}
    		
    		}
    		OrderDetails.Add( entity );
    
    		entity.ChangeTracker.ChangeTrackingEnabled = entityTracking;
    		ChangeTracker.ChangeTrackingEnabled = tracking;
    	}
    
    	public void AttachOrderDetails( IEnumerable<OrderDetail> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( AttachOrderDetail );
    	}
    
    	public void DetachOrderDetail( OrderDetail entity )
    	{
    		if ( entity == null ) return;
    
    		var existing = OrderDetails.FirstOrDefault( np => 
    			np.OrderHeaderID == entity.OrderHeaderID
    				&&
    			np.LineNumber == entity.LineNumber
    		);
    
    		if ( existing != null )
    		{
    			var tracking = ChangeTracker.ChangeTrackingEnabled;
    			var existingTracking = existing.ChangeTracker.ChangeTrackingEnabled;
    
    			ChangeTracker.ChangeTrackingEnabled = false;
    			existing.ChangeTracker.ChangeTrackingEnabled = false;
    
    			OrderDetails.Remove( existing );
    
    			existing.ChangeTracker.ChangeTrackingEnabled = existingTracking;
    			ChangeTracker.ChangeTrackingEnabled = tracking;
    		}
    	}
    
    	public void DetachOrderDetails( IEnumerable<OrderDetail> entities )
    	{
    		if ( entities == null || !entities.Any() ) return;
    		entities.ToList().ForEach( DetachOrderDetail );
    	}
    
    	public void DetachOrderDetails()
    	{
    		DetachOrderDetails( OrderDetails );
    	}
    

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            OrderDetails.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.OrderHeader = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrderDetails", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.OrderHeader, this))
                    {
                        item.OrderHeader = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrderDetails", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
